// Code generated by go-swagger; DO NOT EDIT.

package operations

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDescribePolicyParams creates a new DescribePolicyParams object
// with the default values initialized.
func NewDescribePolicyParams() *DescribePolicyParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
	)
	return &DescribePolicyParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribePolicyParamsWithTimeout creates a new DescribePolicyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribePolicyParamsWithTimeout(timeout time.Duration) *DescribePolicyParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
	)
	return &DescribePolicyParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,

		timeout: timeout,
	}
}

// NewDescribePolicyParamsWithContext creates a new DescribePolicyParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribePolicyParamsWithContext(ctx context.Context) *DescribePolicyParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
	)
	return &DescribePolicyParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,

		Context: ctx,
	}
}

// NewDescribePolicyParamsWithHTTPClient creates a new DescribePolicyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribePolicyParamsWithHTTPClient(client *http.Client) *DescribePolicyParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
	)
	return &DescribePolicyParams{
		Page:       &pageDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*DescribePolicyParams contains all the parameters to send to the API endpoint
for the describe policy operation typically these are written to a http.Request
*/
type DescribePolicyParams struct {

	/*Page
	  Which page of results to retrieve

	*/
	Page *int64
	/*PageSize
	  Number of items in each page of results

	*/
	PageSize *int64
	/*PolicyID
	  URL-encoded panther policy ID

	*/
	PolicyID string
	/*Status
	  Limit entries to those with a specific compliance status

	*/
	Status *string
	/*Suppressed
	  Limit entries to those which are/are not suppressed

	*/
	Suppressed *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe policy params
func (o *DescribePolicyParams) WithTimeout(timeout time.Duration) *DescribePolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe policy params
func (o *DescribePolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe policy params
func (o *DescribePolicyParams) WithContext(ctx context.Context) *DescribePolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe policy params
func (o *DescribePolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe policy params
func (o *DescribePolicyParams) WithHTTPClient(client *http.Client) *DescribePolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe policy params
func (o *DescribePolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the describe policy params
func (o *DescribePolicyParams) WithPage(page *int64) *DescribePolicyParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the describe policy params
func (o *DescribePolicyParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the describe policy params
func (o *DescribePolicyParams) WithPageSize(pageSize *int64) *DescribePolicyParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the describe policy params
func (o *DescribePolicyParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPolicyID adds the policyID to the describe policy params
func (o *DescribePolicyParams) WithPolicyID(policyID string) *DescribePolicyParams {
	o.SetPolicyID(policyID)
	return o
}

// SetPolicyID adds the policyId to the describe policy params
func (o *DescribePolicyParams) SetPolicyID(policyID string) {
	o.PolicyID = policyID
}

// WithStatus adds the status to the describe policy params
func (o *DescribePolicyParams) WithStatus(status *string) *DescribePolicyParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe policy params
func (o *DescribePolicyParams) SetStatus(status *string) {
	o.Status = status
}

// WithSuppressed adds the suppressed to the describe policy params
func (o *DescribePolicyParams) WithSuppressed(suppressed *bool) *DescribePolicyParams {
	o.SetSuppressed(suppressed)
	return o
}

// SetSuppressed adds the suppressed to the describe policy params
func (o *DescribePolicyParams) SetSuppressed(suppressed *bool) {
	o.Suppressed = suppressed
}

// WriteToRequest writes these params to a swagger request
func (o *DescribePolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	// query param policyId
	qrPolicyID := o.PolicyID
	qPolicyID := qrPolicyID
	if qPolicyID != "" {
		if err := r.SetQueryParam("policyId", qPolicyID); err != nil {
			return err
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.Suppressed != nil {

		// query param suppressed
		var qrSuppressed bool
		if o.Suppressed != nil {
			qrSuppressed = *o.Suppressed
		}
		qSuppressed := swag.FormatBool(qrSuppressed)
		if qSuppressed != "" {
			if err := r.SetQueryParam("suppressed", qSuppressed); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
