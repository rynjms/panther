// Code generated by go-swagger; DO NOT EDIT.

package models

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AnalysisType analysis type
//
// swagger:model AnalysisType
type AnalysisType string

const (

	// AnalysisTypeGLOBAL captures enum value "GLOBAL"
	AnalysisTypeGLOBAL AnalysisType = "GLOBAL"

	// AnalysisTypePOLICY captures enum value "POLICY"
	AnalysisTypePOLICY AnalysisType = "POLICY"

	// AnalysisTypeRULE captures enum value "RULE"
	AnalysisTypeRULE AnalysisType = "RULE"
)

// for schema
var analysisTypeEnum []interface{}

func init() {
	var res []AnalysisType
	if err := json.Unmarshal([]byte(`["GLOBAL","POLICY","RULE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analysisTypeEnum = append(analysisTypeEnum, v)
	}
}

func (m AnalysisType) validateAnalysisTypeEnum(path, location string, value AnalysisType) error {
	if err := validate.EnumCase(path, location, value, analysisTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this analysis type
func (m AnalysisType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAnalysisTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
