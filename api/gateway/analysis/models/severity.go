// Code generated by go-swagger; DO NOT EDIT.

package models

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Severity Policy severity
//
// swagger:model severity
type Severity string

const (

	// SeverityINFO captures enum value "INFO"
	SeverityINFO Severity = "INFO"

	// SeverityLOW captures enum value "LOW"
	SeverityLOW Severity = "LOW"

	// SeverityMEDIUM captures enum value "MEDIUM"
	SeverityMEDIUM Severity = "MEDIUM"

	// SeverityHIGH captures enum value "HIGH"
	SeverityHIGH Severity = "HIGH"

	// SeverityCRITICAL captures enum value "CRITICAL"
	SeverityCRITICAL Severity = "CRITICAL"
)

// for schema
var severityEnum []interface{}

func init() {
	var res []Severity
	if err := json.Unmarshal([]byte(`["INFO","LOW","MEDIUM","HIGH","CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		severityEnum = append(severityEnum, v)
	}
}

func (m Severity) validateSeverityEnum(path, location string, value Severity) error {
	if err := validate.EnumCase(path, location, value, severityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this severity
func (m Severity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSeverityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
