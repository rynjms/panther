// Code generated by go-swagger; DO NOT EDIT.

package operations

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/panther-labs/panther/api/gateway/analysis/models"
)

// GetGlobalReader is a Reader for the GetGlobal structure.
type GetGlobalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGlobalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGlobalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGlobalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGlobalNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGlobalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGlobalOK creates a GetGlobalOK with default headers values
func NewGetGlobalOK() *GetGlobalOK {
	return &GetGlobalOK{}
}

/*GetGlobalOK handles this case with default header values.

OK
*/
type GetGlobalOK struct {
	Payload *models.Global
}

func (o *GetGlobalOK) Error() string {
	return fmt.Sprintf("[GET /global][%d] getGlobalOK  %+v", 200, o.Payload)
}

func (o *GetGlobalOK) GetPayload() *models.Global {
	return o.Payload
}

func (o *GetGlobalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Global)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalBadRequest creates a GetGlobalBadRequest with default headers values
func NewGetGlobalBadRequest() *GetGlobalBadRequest {
	return &GetGlobalBadRequest{}
}

/*GetGlobalBadRequest handles this case with default header values.

Bad request
*/
type GetGlobalBadRequest struct {
	Payload *models.Error
}

func (o *GetGlobalBadRequest) Error() string {
	return fmt.Sprintf("[GET /global][%d] getGlobalBadRequest  %+v", 400, o.Payload)
}

func (o *GetGlobalBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGlobalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalNotFound creates a GetGlobalNotFound with default headers values
func NewGetGlobalNotFound() *GetGlobalNotFound {
	return &GetGlobalNotFound{}
}

/*GetGlobalNotFound handles this case with default header values.

Global does not exist
*/
type GetGlobalNotFound struct {
}

func (o *GetGlobalNotFound) Error() string {
	return fmt.Sprintf("[GET /global][%d] getGlobalNotFound ", 404)
}

func (o *GetGlobalNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGlobalInternalServerError creates a GetGlobalInternalServerError with default headers values
func NewGetGlobalInternalServerError() *GetGlobalInternalServerError {
	return &GetGlobalInternalServerError{}
}

/*GetGlobalInternalServerError handles this case with default header values.

Internal server error
*/
type GetGlobalInternalServerError struct {
}

func (o *GetGlobalInternalServerError) Error() string {
	return fmt.Sprintf("[GET /global][%d] getGlobalInternalServerError ", 500)
}

func (o *GetGlobalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
