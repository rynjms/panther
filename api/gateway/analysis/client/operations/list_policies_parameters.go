// Code generated by go-swagger; DO NOT EDIT.

package operations

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPoliciesParams creates a new ListPoliciesParams object
// with the default values initialized.
func NewListPoliciesParams() *ListPoliciesParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
		sortByDefault   = string("severity")
		sortDirDefault  = string("descending")
	)
	return &ListPoliciesParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
		SortBy:   &sortByDefault,
		SortDir:  &sortDirDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListPoliciesParamsWithTimeout creates a new ListPoliciesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListPoliciesParamsWithTimeout(timeout time.Duration) *ListPoliciesParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
		sortByDefault   = string("severity")
		sortDirDefault  = string("descending")
	)
	return &ListPoliciesParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
		SortBy:   &sortByDefault,
		SortDir:  &sortDirDefault,

		timeout: timeout,
	}
}

// NewListPoliciesParamsWithContext creates a new ListPoliciesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListPoliciesParamsWithContext(ctx context.Context) *ListPoliciesParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
		sortByDefault   = string("severity")
		sortDirDefault  = string("descending")
	)
	return &ListPoliciesParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
		SortBy:   &sortByDefault,
		SortDir:  &sortDirDefault,

		Context: ctx,
	}
}

// NewListPoliciesParamsWithHTTPClient creates a new ListPoliciesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListPoliciesParamsWithHTTPClient(client *http.Client) *ListPoliciesParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
		sortByDefault   = string("severity")
		sortDirDefault  = string("descending")
	)
	return &ListPoliciesParams{
		Page:       &pageDefault,
		PageSize:   &pageSizeDefault,
		SortBy:     &sortByDefault,
		SortDir:    &sortDirDefault,
		HTTPClient: client,
	}
}

/*ListPoliciesParams contains all the parameters to send to the API endpoint
for the list policies operation typically these are written to a http.Request
*/
type ListPoliciesParams struct {

	/*ComplianceStatus
	  Only include policies with a specific compliance status

	*/
	ComplianceStatus *string
	/*Enabled
	  Only include policies which are enabled or disabled

	*/
	Enabled *bool
	/*HasRemediation
	  Only include policies with or without auto-remediation enabled

	*/
	HasRemediation *bool
	/*NameContains
	  Only include policies whose ID or display name contains this substring (case-insensitive)

	*/
	NameContains *string
	/*Page
	  Which page of results to retrieve

	*/
	Page *int64
	/*PageSize
	  Number of items in each page of results

	*/
	PageSize *int64
	/*ResourceTypes
	  Only include policies which apply to one of these resource types

	*/
	ResourceTypes []string
	/*Severity
	  Only include policies with this severity

	*/
	Severity *string
	/*SortBy
	  Name of the field to sort by

	*/
	SortBy *string
	/*SortDir
	  Sort direction

	*/
	SortDir *string
	/*Tags
	  Only include policies with all of these tags (case-insensitive)

	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list policies params
func (o *ListPoliciesParams) WithTimeout(timeout time.Duration) *ListPoliciesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list policies params
func (o *ListPoliciesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list policies params
func (o *ListPoliciesParams) WithContext(ctx context.Context) *ListPoliciesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list policies params
func (o *ListPoliciesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list policies params
func (o *ListPoliciesParams) WithHTTPClient(client *http.Client) *ListPoliciesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list policies params
func (o *ListPoliciesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComplianceStatus adds the complianceStatus to the list policies params
func (o *ListPoliciesParams) WithComplianceStatus(complianceStatus *string) *ListPoliciesParams {
	o.SetComplianceStatus(complianceStatus)
	return o
}

// SetComplianceStatus adds the complianceStatus to the list policies params
func (o *ListPoliciesParams) SetComplianceStatus(complianceStatus *string) {
	o.ComplianceStatus = complianceStatus
}

// WithEnabled adds the enabled to the list policies params
func (o *ListPoliciesParams) WithEnabled(enabled *bool) *ListPoliciesParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the list policies params
func (o *ListPoliciesParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithHasRemediation adds the hasRemediation to the list policies params
func (o *ListPoliciesParams) WithHasRemediation(hasRemediation *bool) *ListPoliciesParams {
	o.SetHasRemediation(hasRemediation)
	return o
}

// SetHasRemediation adds the hasRemediation to the list policies params
func (o *ListPoliciesParams) SetHasRemediation(hasRemediation *bool) {
	o.HasRemediation = hasRemediation
}

// WithNameContains adds the nameContains to the list policies params
func (o *ListPoliciesParams) WithNameContains(nameContains *string) *ListPoliciesParams {
	o.SetNameContains(nameContains)
	return o
}

// SetNameContains adds the nameContains to the list policies params
func (o *ListPoliciesParams) SetNameContains(nameContains *string) {
	o.NameContains = nameContains
}

// WithPage adds the page to the list policies params
func (o *ListPoliciesParams) WithPage(page *int64) *ListPoliciesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list policies params
func (o *ListPoliciesParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the list policies params
func (o *ListPoliciesParams) WithPageSize(pageSize *int64) *ListPoliciesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list policies params
func (o *ListPoliciesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithResourceTypes adds the resourceTypes to the list policies params
func (o *ListPoliciesParams) WithResourceTypes(resourceTypes []string) *ListPoliciesParams {
	o.SetResourceTypes(resourceTypes)
	return o
}

// SetResourceTypes adds the resourceTypes to the list policies params
func (o *ListPoliciesParams) SetResourceTypes(resourceTypes []string) {
	o.ResourceTypes = resourceTypes
}

// WithSeverity adds the severity to the list policies params
func (o *ListPoliciesParams) WithSeverity(severity *string) *ListPoliciesParams {
	o.SetSeverity(severity)
	return o
}

// SetSeverity adds the severity to the list policies params
func (o *ListPoliciesParams) SetSeverity(severity *string) {
	o.Severity = severity
}

// WithSortBy adds the sortBy to the list policies params
func (o *ListPoliciesParams) WithSortBy(sortBy *string) *ListPoliciesParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list policies params
func (o *ListPoliciesParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortDir adds the sortDir to the list policies params
func (o *ListPoliciesParams) WithSortDir(sortDir *string) *ListPoliciesParams {
	o.SetSortDir(sortDir)
	return o
}

// SetSortDir adds the sortDir to the list policies params
func (o *ListPoliciesParams) SetSortDir(sortDir *string) {
	o.SortDir = sortDir
}

// WithTags adds the tags to the list policies params
func (o *ListPoliciesParams) WithTags(tags []string) *ListPoliciesParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the list policies params
func (o *ListPoliciesParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *ListPoliciesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ComplianceStatus != nil {

		// query param complianceStatus
		var qrComplianceStatus string
		if o.ComplianceStatus != nil {
			qrComplianceStatus = *o.ComplianceStatus
		}
		qComplianceStatus := qrComplianceStatus
		if qComplianceStatus != "" {
			if err := r.SetQueryParam("complianceStatus", qComplianceStatus); err != nil {
				return err
			}
		}

	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool
		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {
			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}

	}

	if o.HasRemediation != nil {

		// query param hasRemediation
		var qrHasRemediation bool
		if o.HasRemediation != nil {
			qrHasRemediation = *o.HasRemediation
		}
		qHasRemediation := swag.FormatBool(qrHasRemediation)
		if qHasRemediation != "" {
			if err := r.SetQueryParam("hasRemediation", qHasRemediation); err != nil {
				return err
			}
		}

	}

	if o.NameContains != nil {

		// query param nameContains
		var qrNameContains string
		if o.NameContains != nil {
			qrNameContains = *o.NameContains
		}
		qNameContains := qrNameContains
		if qNameContains != "" {
			if err := r.SetQueryParam("nameContains", qNameContains); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	valuesResourceTypes := o.ResourceTypes

	joinedResourceTypes := swag.JoinByFormat(valuesResourceTypes, "csv")
	// query array param resourceTypes
	if err := r.SetQueryParam("resourceTypes", joinedResourceTypes...); err != nil {
		return err
	}

	if o.Severity != nil {

		// query param severity
		var qrSeverity string
		if o.Severity != nil {
			qrSeverity = *o.Severity
		}
		qSeverity := qrSeverity
		if qSeverity != "" {
			if err := r.SetQueryParam("severity", qSeverity); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortDir != nil {

		// query param sortDir
		var qrSortDir string
		if o.SortDir != nil {
			qrSortDir = *o.SortDir
		}
		qSortDir := qrSortDir
		if qSortDir != "" {
			if err := r.SetQueryParam("sortDir", qSortDir); err != nil {
				return err
			}
		}

	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "csv")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
